//
// File generated by WinMDIDL version 8.00.0008
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Storage.Streams.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace doubango_rt
{
    namespace BackEnd
    {
        typedef enum rtConstants rtConstants;

        typedef enum rt_twrap_media_type_t rt_twrap_media_type_t;

        typedef enum rt_tmedia_bandwidth_level_t rt_tmedia_bandwidth_level_t;

        typedef enum rt_tmedia_pref_video_size_t rt_tmedia_pref_video_size_t;

        typedef enum rt_tmedia_profile_t rt_tmedia_profile_t;

        typedef enum rt_tmedia_qos_strength_t rt_tmedia_qos_strength_t;

        typedef enum rt_tmedia_qos_stype_t rt_tmedia_qos_stype_t;

        typedef enum rt_tmedia_srtp_mode_t rt_tmedia_srtp_mode_t;

        typedef enum rt_tmedia_srtp_type_t rt_tmedia_srtp_type_t;

        typedef enum rt_tmedia_t140_data_type_t rt_tmedia_t140_data_type_t;

        typedef enum rt_tmedia_type_t rt_tmedia_type_t;

        typedef enum rt_tmsrp_event_type_t rt_tmsrp_event_type_t;

        typedef enum rt_tmsrp_request_type_t rt_tmsrp_request_type_t;

        typedef enum rt_tsip_info_event_type_t rt_tsip_info_event_type_t;

        typedef enum rt_tsip_invite_event_type_t rt_tsip_invite_event_type_t;

        typedef enum rt_tsip_message_event_type_t rt_tsip_message_event_type_t;

        typedef enum rt_tsip_options_event_type_t rt_tsip_options_event_type_t;

        typedef enum rt_tsip_publish_event_type_t rt_tsip_publish_event_type_t;

        typedef enum rt_tsip_register_event_type_t rt_tsip_register_event_type_t;

        typedef enum rt_tsip_request_type_t rt_tsip_request_type_t;

        typedef enum rt_tsip_subscribe_event_type_t rt_tsip_subscribe_event_type_t;

        typedef enum rt_tdav_codec_id_t rt_tdav_codec_id_t;

        typedef enum AudioRoute AudioRoute;

        typedef enum CameraSensorLocation CameraSensorLocation;

        typedef enum DebugLevel DebugLevel;

        typedef enum SipSessionState SipSessionState;

        typedef enum SipStackState SipStackState;

        typedef enum SipAVCallState SipAVCallState;

        typedef enum SipHoldStateState SipHoldStateState;

        typedef enum SipNetworkTransport SipNetworkTransport;

        typedef enum IPVersion IPVersion;

        delegate VideoFrameReceivedEventHandler;

        interface __IrtActionConfigPublicNonVirtuals;

        interface rtIDDebugCallback;

        interface __IrtDDebugCallbackPublicNonVirtuals;

        interface __IrtCodecPublicNonVirtuals;

        interface __IrtMediaSessionMgrPublicNonVirtuals;

        interface __IrtMediaSessionMgrStatics;

        interface __IrtMsrpByteRangePublicNonVirtuals;

        interface __IrtMsrpMessagePublicNonVirtuals;

        interface __IrtMsrpEventPublicNonVirtuals;

        interface rtIMsrpCallback;

        interface __IrtMsrpCallbackPublicNonVirtuals;

        interface __IrtDnsResultPublicNonVirtuals;

        interface __IrtSipStackPublicNonVirtuals;

        interface __IrtSipStackStatics;

        interface __IrtSipUriPublicNonVirtuals;

        interface __IrtSipUriFactory;

        interface __IrtSipUriStatics;

        interface __IrtT140CallbackDataPublicNonVirtuals;

        interface rtIT140Callback;

        interface __IrtT140CallbackProtectedVirtuals;

        interface __IrtT140CallbackFactory;

        interface rtISipSession;

        interface rtIInviteSession;

        interface __IrtSipSessionPublicNonVirtuals;

        interface __IrtSipSessionFactory;

        interface __IrtInviteSessionPublicNonVirtuals;

        interface __IrtInviteSessionFactory;

        interface __IrtCallSessionPublicNonVirtuals;

        interface __IrtCallSessionFactory;

        interface __IrtMsrpSessionPublicNonVirtuals;

        interface __IrtMsrpSessionFactory;

        interface __IrtMessagingSessionPublicNonVirtuals;

        interface __IrtMessagingSessionFactory;

        interface __IrtInfoSessionPublicNonVirtuals;

        interface __IrtInfoSessionFactory;

        interface __IrtOptionsSessionPublicNonVirtuals;

        interface __IrtOptionsSessionFactory;

        interface __IrtPublicationSessionPublicNonVirtuals;

        interface __IrtPublicationSessionFactory;

        interface __IrtRegistrationSessionPublicNonVirtuals;

        interface __IrtRegistrationSessionFactory;

        interface __IrtSubscriptionSessionPublicNonVirtuals;

        interface __IrtSubscriptionSessionFactory;

        interface rtISipCallback;

        interface __IrtSipCallbackPublicNonVirtuals;

        interface rtISipEvent;

        interface __IrtDialogEventPublicNonVirtuals;

        interface __IrtStackEventPublicNonVirtuals;

        interface __IrtInviteEventPublicNonVirtuals;

        interface __IrtMessagingEventPublicNonVirtuals;

        interface __IrtInfoEventPublicNonVirtuals;

        interface __IrtOptionsEventPublicNonVirtuals;

        interface __IrtPublicationEventPublicNonVirtuals;

        interface __IrtRegistrationEventPublicNonVirtuals;

        interface __IrtSubscriptionEventPublicNonVirtuals;

        interface __IrtSdpMessagePublicNonVirtuals;

        interface __IrtSipMessagePublicNonVirtuals;

        interface IVideoRenderer;

        interface IDebugMessageListener;

        interface IAudioStateChangedListener;

        interface ISipRegistrationStateChangedListener;

        interface ISipAVCallStateChangedListener;

        interface ISipStackStateChangedListener;

        interface __ISipConfigPublicNonVirtuals;

        interface __ISipAVCallPublicNonVirtuals;

        interface __ISipServicePublicNonVirtuals;

        interface __ISipServiceStatics;

        interface __IGlobalsPublicNonVirtuals;

        interface __IGlobalsProtectedNonVirtuals;

        interface __IGlobalsStatics;

        runtimeclass rtActionConfig;

        runtimeclass rtDDebugCallback;

        runtimeclass rtCodec;

        runtimeclass rtMediaSessionMgr;

        runtimeclass rtMsrpByteRange;

        runtimeclass rtMsrpMessage;

        runtimeclass rtMsrpEvent;

        runtimeclass rtMsrpCallback;

        runtimeclass rtDnsResult;

        runtimeclass rtSipStack;

        runtimeclass rtSipUri;

        runtimeclass rtT140CallbackData;

        runtimeclass rtT140Callback;

        runtimeclass rtSipSession;

        runtimeclass rtInviteSession;

        runtimeclass rtCallSession;

        runtimeclass rtMsrpSession;

        runtimeclass rtMessagingSession;

        runtimeclass rtInfoSession;

        runtimeclass rtOptionsSession;

        runtimeclass rtPublicationSession;

        runtimeclass rtRegistrationSession;

        runtimeclass rtSubscriptionSession;

        runtimeclass rtSipCallback;

        runtimeclass rtDialogEvent;

        runtimeclass rtStackEvent;

        runtimeclass rtInviteEvent;

        runtimeclass rtMessagingEvent;

        runtimeclass rtInfoEvent;

        runtimeclass rtOptionsEvent;

        runtimeclass rtPublicationEvent;

        runtimeclass rtRegistrationEvent;

        runtimeclass rtSubscriptionEvent;

        runtimeclass rtSdpMessage;

        runtimeclass rtSipMessage;

        runtimeclass SipConfig;

        runtimeclass SipAVCall;

        runtimeclass SipService;

        runtimeclass Globals;
    }
}

// Generic instantiations

// Type definition
namespace doubango_rt
{
    namespace BackEnd
    {
        [version(0x00000001)]
        enum rtConstants
        {
            rt_tsip_event_code_dialog_transport_error   = 702,
            rt_tsip_event_code_dialog_global_error      = 703,
            rt_tsip_event_code_dialog_message_error     = 704,
            rt_tsip_event_code_dialog_request_incoming  = 800,
            rt_tsip_event_code_dialog_request_outgoing  = 802,
            rt_tsip_event_code_dialog_request_cancelled = 803,
            rt_tsip_event_code_dialog_request_sent      = 804,
            rt_tsip_event_code_dialog_connecting        = 900,
            rt_tsip_event_code_dialog_connected         = 901,
            rt_tsip_event_code_dialog_terminating       = 902,
            rt_tsip_event_code_dialog_terminated        = 903,
            rt_tsip_event_code_stack_starting           = 950,
            rt_tsip_event_code_stack_started            = 951,
            rt_tsip_event_code_stack_stopping           = 952,
            rt_tsip_event_code_stack_stopped            = 953,
            rt_tsip_event_code_stack_failed_to_start    = 954,
            rt_tsip_event_code_stack_failed_to_stop     = 955
        };

        [version(0x00000001)]
        enum rt_twrap_media_type_t
        {
            twrap_media_none        = 0,
            twrap_media_audio       = 1,
            twrap_media_video       = 2,
            twrap_media_msrp        = 4,
            twrap_media_t140        = 8,
            twrap_media_bfcp        = 16,
            twrap_media_bfcp_audio  = 48,
            twrap_media_bfcp_video  = 80,
            twrap_media_audiovideo  = 3,
            twrap_media_audio_video = 3
        };

        [version(0x00000001)]
        enum rt_tmedia_bandwidth_level_t
        {
            tmedia_bl_low          = 0,
            tmedia_bl_medium       = 1,
            tmedia_bl_hight        = 2,
            tmedia_bl_unrestricted = 3
        };

        [version(0x00000001)]
        enum rt_tmedia_pref_video_size_t
        {
            tmedia_pref_video_size_sqcif = 0,
            tmedia_pref_video_size_qcif  = 1,
            tmedia_pref_video_size_qvga  = 2,
            tmedia_pref_video_size_cif   = 3,
            tmedia_pref_video_size_hvga  = 4,
            tmedia_pref_video_size_vga   = 5,
            tmedia_pref_video_size_4cif  = 6,
            tmedia_pref_video_size_svga  = 7,
            tmedia_pref_video_size_480p  = 8,
            tmedia_pref_video_size_720p  = 9,
            tmedia_pref_video_size_16cif = 10,
            tmedia_pref_video_size_1080p = 11
        };

        [version(0x00000001)]
        enum rt_tmedia_profile_t
        {
            tmedia_profile_default = 0,
            tmedia_profile_rtcweb  = 1
        };

        [version(0x00000001)]
        enum rt_tmedia_qos_strength_t
        {
            tmedia_qos_strength_none      = 0,
            tmedia_qos_strength_failure   = 1,
            tmedia_qos_strength_unknown   = 2,
            tmedia_qos_strength_optional  = 3,
            tmedia_qos_strength_mandatory = 4
        };

        [version(0x00000001)]
        enum rt_tmedia_qos_stype_t
        {
            tmedia_qos_stype_none      = 0,
            tmedia_qos_stype_segmented = 1,
            tmedia_qos_stype_e2e       = 2
        };

        [version(0x00000001)]
        enum rt_tmedia_srtp_mode_t
        {
            tmedia_srtp_mode_none      = 0,
            tmedia_srtp_mode_optional  = 1,
            tmedia_srtp_mode_mandatory = 2
        };

        [version(0x00000001)]
        enum rt_tmedia_srtp_type_t
        {
            tmedia_srtp_type_none      = 0,
            tmedia_srtp_type_sdes      = 1,
            tmedia_srtp_type_dtls      = 2,
            tmedia_srtp_type_sdes_dtls = 3
        };

        [version(0x00000001)]
        enum rt_tmedia_t140_data_type_t
        {
            tmedia_t140_data_type_utf8                      = 0,
            tmedia_t140_data_type_zero_width_no_break_space = 15711167,
            tmedia_t140_data_type_backspace                 = 8,
            tmedia_t140_data_type_esc                       = 27,
            tmedia_t140_data_type_cr                        = 13,
            tmedia_t140_data_type_lf                        = 10,
            tmedia_t140_data_type_cr_lf                     = 3338,
            tmedia_t140_data_type_bell                      = 7,
            tmedia_t140_data_type_sos                       = 152,
            tmedia_t140_data_type_string_term               = 156,
            tmedia_t140_data_type_graphic_start             = 155,
            tmedia_t140_data_type_graphic_end               = 109,
            tmedia_t140_data_type_loss_char_char            = 65533,
            tmedia_t140_data_type_loss_utf8                 = 15712189
        };

        [version(0x00000001)]
        enum rt_tmedia_type_t
        {
            tmedia_none       = 0,
            tmedia_ghost      = 1,
            tmedia_audio      = 2,
            tmedia_video      = 4,
            tmedia_chat       = 8,
            tmedia_file       = 16,
            tmedia_t38        = 32,
            tmedia_t140       = 64,
            tmedia_msrp       = 24,
            tmedia_audiovideo = 6,
            tmedia_all        = 255
        };

        [version(0x00000001)]
        enum rt_tmsrp_event_type_t
        {
            tmsrp_event_type_none         = 0,
            tmsrp_event_type_connected    = 1,
            tmsrp_event_type_disconnected = 2,
            tmsrp_event_type_message      = 3
        };

        [version(0x00000001)]
        enum rt_tmsrp_request_type_t
        {
            tmsrp_NONE   = 0,
            tmsrp_SEND   = 1,
            tmsrp_REPORT = 2,
            tmsrp_AUTH   = 3
        };

        [version(0x00000001)]
        enum rt_tsip_info_event_type_t
        {
            tsip_i_info  = 0,
            tsip_ao_info = 1
        };

        [version(0x00000001)]
        enum rt_tsip_invite_event_type_t
        {
            tsip_i_newcall          = 0,
            tsip_i_request          = 1,
            tsip_ao_request         = 2,
            tsip_o_ect_trying       = 3,
            tsip_o_ect_accepted     = 4,
            tsip_o_ect_completed    = 5,
            tsip_o_ect_failed       = 6,
            tsip_o_ect_notify       = 7,
            tsip_i_ect_requested    = 8,
            tsip_i_ect_newcall      = 9,
            tsip_i_ect_completed    = 10,
            tsip_i_ect_failed       = 11,
            tsip_i_ect_notify       = 12,
            tsip_m_early_media      = 13,
            tsip_m_updating         = 14,
            tsip_m_updated          = 15,
            tsip_m_local_hold_ok    = 16,
            tsip_m_local_hold_nok   = 17,
            tsip_m_local_resume_ok  = 18,
            tsip_m_local_resume_nok = 19,
            tsip_m_remote_hold      = 20,
            tsip_m_remote_resume    = 21
        };

        [version(0x00000001)]
        enum rt_tsip_message_event_type_t
        {
            tsip_i_message  = 0,
            tsip_ao_message = 1
        };

        [version(0x00000001)]
        enum rt_tsip_options_event_type_t
        {
            tsip_i_options  = 0,
            tsip_ao_options = 1
        };

        [version(0x00000001)]
        enum rt_tsip_publish_event_type_t
        {
            tsip_i_publish    = 0,
            tsip_ao_publish   = 1,
            tsip_i_unpublish  = 2,
            tsip_ao_unpublish = 3
        };

        [version(0x00000001)]
        enum rt_tsip_register_event_type_t
        {
            tsip_i_newreg      = 0,
            tsip_i_register    = 1,
            tsip_ao_register   = 2,
            tsip_i_unregister  = 3,
            tsip_ao_unregister = 4
        };

        [version(0x00000001)]
        enum rt_tsip_request_type_t
        {
            tsip_NONE      = 0,
            tsip_ACK       = 1,
            tsip_BYE       = 2,
            tsip_CANCEL    = 3,
            tsip_INVITE    = 4,
            tsip_OPTIONS   = 5,
            tsip_REGISTER  = 6,
            tsip_SUBSCRIBE = 7,
            tsip_NOTIFY    = 8,
            tsip_REFER     = 9,
            tsip_INFO      = 10,
            tsip_UPDATE    = 11,
            tsip_MESSAGE   = 12,
            tsip_PUBLISH   = 13,
            tsip_PRACK     = 14
        };

        [version(0x00000001)]
        enum rt_tsip_subscribe_event_type_t
        {
            tsip_i_subscribe    = 0,
            tsip_ao_subscribe   = 1,
            tsip_i_unsubscribe  = 2,
            tsip_ao_unsubscribe = 3,
            tsip_i_notify       = 4,
            tsip_ao_notify      = 5
        };

        [version(0x00000001)]
        enum rt_tdav_codec_id_t
        {
            tdav_codec_id_none      = 0,
            tdav_codec_id_amr_nb_oa = 1,
            tdav_codec_id_amr_nb_be = 2,
            tdav_codec_id_amr_wb_oa = 4,
            tdav_codec_id_amr_wb_be = 8,
            tdav_codec_id_gsm       = 16,
            tdav_codec_id_pcma      = 32,
            tdav_codec_id_pcmu      = 64,
            tdav_codec_id_ilbc      = 128,
            tdav_codec_id_speex_nb  = 256,
            tdav_codec_id_speex_wb  = 512,
            tdav_codec_id_speex_uwb = 1024,
            tdav_codec_id_bv16      = 2048,
            tdav_codec_id_bv32      = 4096,
            tdav_codec_id_opus      = 8192,
            tdav_codec_id_g729ab    = 16384,
            tdav_codec_id_g722      = 32768,
            tdav_codec_id_h261      = 65536,
            tdav_codec_id_h263      = 131072,
            tdav_codec_id_h263p     = 262144,
            tdav_codec_id_h263pp    = 524288,
            tdav_codec_id_h264_bp   = 1048576,
            tdav_codec_id_h264_mp   = 2097152,
            tdav_codec_id_h264_hp   = 4194304,
            tdav_codec_id_h264_bp10 = 1048576,
            tdav_codec_id_h264_bp20 = 1048576,
            tdav_codec_id_h264_bp30 = 1048576,
            tdav_codec_id_h264_svc  = 8388608,
            tdav_codec_id_theora    = 16777216,
            tdav_codec_id_mp4ves_es = 33554432,
            tdav_codec_id_vp8       = 67108864,
            tdav_codec_id_t140      = 1073741824,
            tdav_codec_id_all       = -1
        };

        [version(0x00000001)]
        enum AudioRoute
        {
            None         = 0,
            Earpiece     = 1,
            Speakerphone = 2,
            Bluetooth    = 4
        };

        [version(0x00000001)]
        enum CameraSensorLocation
        {
            Front = 1,
            Back  = 0
        };

        [version(0x00000001)]
        enum DebugLevel
        {
            Info  = 0,
            Warn  = 1,
            Error = 2,
            Fatal = 3
        };

        [version(0x00000001)]
        enum SipSessionState
        {
            None        = 0,
            Connecting  = 1,
            Connected   = 2,
            Terminating = 3,
            Terminated  = 4,
            Error       = 5
        };

        [version(0x00000001)]
        enum SipStackState
        {
            None     = 0,
            Starting = 1,
            Started  = 2,
            Stopping = 3,
            Stopped  = 4,
            Error    = 5
        };

        [version(0x00000001)]
        enum SipAVCallState
        {
            None          = 0,
            Incoming      = 1,
            InProgress    = 2,
            RemoteRinging = 3,
            EarlyMedia    = 4,
            InCall        = 5,
            Terminating   = 6,
            Terminated    = 7
        };

        [version(0x00000001)]
        enum SipHoldStateState
        {
            None       = 0,
            LocalHeld  = 1,
            RemoteHeld = 2,
            Error      = 4
        };

        [version(0x00000001)]
        enum SipNetworkTransport
        {
            UDP = 0,
            TCP = 1
        };

        [version(0x00000001)]
        enum IPVersion
        {
            IPv4 = 0,
            IPv6 = 1
        };

        [uuid(1FC46173-3072-316E-8C9C-0A06F538022C)]
        [version(0x00000001)]
        delegate
            HRESULT VideoFrameReceivedEventHandler([in] Windows.Storage.Streams.IBuffer* __param0, [in] UINT64 __param1, [in] UINT64 __param2);

        [uuid(1BA29F65-9ABB-3024-8221-A98CDB008887)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtActionConfig)]
        interface __IrtActionConfigPublicNonVirtuals : IInspectable
        {
            HRESULT addHeader([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* __returnValue);
            HRESULT addPayload([in] HSTRING payload, [out] [retval] boolean* __returnValue);
            HRESULT setActiveMedia([in] doubango_rt.BackEnd.rt_twrap_media_type_t type, [out] [retval] boolean* __returnValue);
            HRESULT setResponseLine([in] INT16 code, [in] HSTRING phrase, [out] [retval] doubango_rt.BackEnd.rtActionConfig** __returnValue);
            HRESULT setMediaString([in] doubango_rt.BackEnd.rt_twrap_media_type_t type, [in] HSTRING key, [in] HSTRING value, [out] [retval] doubango_rt.BackEnd.rtActionConfig** __returnValue);
            HRESULT setMediaInt([in] doubango_rt.BackEnd.rt_twrap_media_type_t type, [in] HSTRING key, [in] INT32 value, [out] [retval] doubango_rt.BackEnd.rtActionConfig** __returnValue);
        }

        [uuid(EA0B2968-7AD4-3D5C-AAD3-2AEFB3ACD2E7)]
        [version(0x00000001)]
        interface rtIDDebugCallback : IInspectable
        {
            HRESULT OnDebugInfo([in] HSTRING message, [out] [retval] INT32* __returnValue);
            HRESULT OnDebugWarn([in] HSTRING message, [out] [retval] INT32* __returnValue);
            HRESULT OnDebugError([in] HSTRING message, [out] [retval] INT32* __returnValue);
            HRESULT OnDebugFatal([in] HSTRING message, [out] [retval] INT32* __returnValue);
        }

        [uuid(F8BB64E3-54A8-3060-9310-0D73B4C5D423)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtDDebugCallback)]
        interface __IrtDDebugCallbackPublicNonVirtuals : IInspectable
        {
        }

        [uuid(8DD1CD82-F943-3715-B510-F8D9F210D75D)]
        [exclusiveto(doubango_rt.BackEnd.rtCodec)]
        [version(0x00000001)]
        interface __IrtCodecPublicNonVirtuals : IInspectable
        {
            HRESULT getMediaType([out] [retval] doubango_rt.BackEnd.rt_twrap_media_type_t* __returnValue);
            HRESULT getName([out] [retval] HSTRING* __returnValue);
            HRESULT getDescription([out] [retval] HSTRING* __returnValue);
            HRESULT getNegFormat([out] [retval] HSTRING* __returnValue);
            HRESULT getAudioSamplingRate([out] [retval] INT32* __returnValue);
            HRESULT getAudioChannels([out] [retval] INT32* __returnValue);
            HRESULT getAudioPTime([out] [retval] INT32* __returnValue);
        }

        [uuid(040D7757-114C-3581-8EF9-D640256C0C14)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMediaSessionMgr)]
        interface __IrtMediaSessionMgrPublicNonVirtuals : IInspectable
        {
            HRESULT sessionSetInt32([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] HSTRING key, [in] INT32 value, [out] [retval] boolean* __returnValue);
            HRESULT sessionGetInt32([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] HSTRING key, [out] [retval] INT32* __returnValue);
            HRESULT consumerSetInt32([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] HSTRING key, [in] INT32 value, [out] [retval] boolean* __returnValue);
            HRESULT consumerSetInt64([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] HSTRING key, [in] INT64 value, [out] [retval] boolean* __returnValue);
            HRESULT producerSetInt32([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] HSTRING key, [in] INT32 value, [out] [retval] boolean* __returnValue);
            HRESULT producerSetInt64([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] HSTRING key, [in] INT64 value, [out] [retval] boolean* __returnValue);
            HRESULT producerGetCodec([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [out] [retval] doubango_rt.BackEnd.rtCodec** __returnValue);
            HRESULT getSessionId([in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [out] [retval] UINT64* __returnValue);
        }

        [uuid(5E3981B2-9A97-38D1-B0D2-48B2FFB7B475)]
        [exclusiveto(doubango_rt.BackEnd.rtMediaSessionMgr)]
        [version(0x00000001)]
        interface __IrtMediaSessionMgrStatics : IInspectable
        {
            HRESULT registerAudioPluginFromFile([in] HSTRING path, [out] [retval] UINT32* __returnValue);
            HRESULT defaultsSetProfile([in] doubango_rt.BackEnd.rt_tmedia_profile_t profile, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetProfile([out] [retval] doubango_rt.BackEnd.rt_tmedia_profile_t* __returnValue);
            HRESULT defaultsSetPrefVideoSize([in] doubango_rt.BackEnd.rt_tmedia_pref_video_size_t pref_video_size, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetJbMargin([in] UINT32 jb_margin_ms, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetJbMaxLateRate([in] UINT32 jb_late_rate_percent, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetEchoTail([in] UINT32 echo_tail, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetEchoTail([out] [retval] UINT32* __returnValue);
            HRESULT defaultsSetEchoSkew([in] UINT32 echo_skew, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetEchoSuppEnabled([in] boolean echo_supp_enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetEchoSuppEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetAgcEnabled([in] boolean agc_enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetAgcEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetAgcLevel([in] FLOAT agc_level, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetAgcLevel([out] [retval] FLOAT* __returnValue);
            HRESULT defaultsSetVadEnabled([in] boolean vad_enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetGetVadEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetNoiseSuppEnabled([in] boolean noise_supp_enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetNoiseSuppEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetNoiseSuppLevel([in] INT32 noise_supp_level, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetNoiseSuppLevel([out] [retval] INT32* __returnValue);
            HRESULT defaultsSet100relEnabled([in] boolean _100rel_enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGet100relEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetScreenSize([in] INT32 sx, [in] INT32 sy, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetAudioGain([in] INT32 producer_gain, [in] INT32 consumer_gain, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetRtpPortRange([in] UINT16 range_start, [in] UINT16 range_stop, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetRtpSymetricEnabled([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetMediaType([in] doubango_rt.BackEnd.rt_twrap_media_type_t media_type, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetVolume([in] INT32 volume, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetVolume([out] [retval] INT32* __returnValue);
            HRESULT defaultsSetInviteSessionTimers([in] INT32 timeout, [in] HSTRING refresher, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetSRtpMode([in] doubango_rt.BackEnd.rt_tmedia_srtp_mode_t mode, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetSRtpMode([out] [retval] doubango_rt.BackEnd.rt_tmedia_srtp_mode_t* __returnValue);
            HRESULT defaultsSetSRtpType([in] doubango_rt.BackEnd.rt_tmedia_srtp_type_t srtp_type, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetSRtpType([out] [retval] doubango_rt.BackEnd.rt_tmedia_srtp_type_t* __returnValue);
            HRESULT defaultsSetRtcpEnabled([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetRtcpEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetRtcpMuxEnabled([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetRtcpMuxEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetIceEnabled([in] boolean ice_enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsSetByPassEncoding([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetByPassEncoding([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetByPassDecoding([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetByPassDecoding([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetVideoJbEnabled([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetVideoJbEnabled([out] [retval] boolean* __returnValue);
            HRESULT defaultsSetRtpBuffSize([in] UINT32 buffSize, [out] [retval] boolean* __returnValue);
            HRESULT defaultsGetRtpBuffSize([out] [retval] UINT32* __returnValue);
            HRESULT defaultsSetAvpfTail([in] UINT32 tail_min, [in] UINT32 tail_max, [out] [retval] boolean* __returnValue);
        }

        [uuid(72089DC3-5600-3F9E-89A9-35D50E350348)]
        [exclusiveto(doubango_rt.BackEnd.rtMsrpByteRange)]
        [version(0x00000001)]
        interface __IrtMsrpByteRangePublicNonVirtuals : IInspectable
        {
            [propget] HRESULT Start([out] [retval] INT64* __returnValue);
            [propget] HRESULT End([out] [retval] INT64* __returnValue);
            [propget] HRESULT Total([out] [retval] INT64* __returnValue);
        }

        [uuid(B92764BB-F11D-3BD1-8DEA-B133CE9BF5F7)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMsrpMessage)]
        interface __IrtMsrpMessagePublicNonVirtuals : IInspectable
        {
            HRESULT isRequest([out] [retval] boolean* __returnValue);
            HRESULT getCode([out] [retval] INT16* __returnValue);
            HRESULT getPhrase([out] [retval] HSTRING* __returnValue);
            HRESULT getRequestType([out] [retval] doubango_rt.BackEnd.rt_tmsrp_request_type_t* __returnValue);
            HRESULT getByteRange([out] [retval] doubango_rt.BackEnd.rtMsrpByteRange** __returnValue);
            HRESULT isLastChunck([out] [retval] boolean* __returnValue);
            HRESULT isFirstChunck([out] [retval] boolean* __returnValue);
            HRESULT isSuccessReport([out] [retval] boolean* __returnValue);
            HRESULT getMsrpHeaderValue([in] HSTRING name, [out] [retval] HSTRING* __returnValue);
            HRESULT getMsrpHeaderParamValue([in] HSTRING name, [in] HSTRING param, [out] [retval] HSTRING* __returnValue);
            HRESULT getMsrpContentLength([out] [retval] UINT32* __returnValue);
            HRESULT getMsrpContent([in] UINT32 maxsize, [out] [retval] HSTRING* __returnValue);
        }

        [uuid(E4EFFEF8-5C8D-389A-BEA7-7E14E2A0AA95)]
        [exclusiveto(doubango_rt.BackEnd.rtMsrpEvent)]
        [version(0x00000001)]
        interface __IrtMsrpEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tmsrp_event_type_t* __returnValue);
            HRESULT getSipSession([out] [retval] doubango_rt.BackEnd.rtMsrpSession** __returnValue);
            HRESULT getMessage([out] [retval] doubango_rt.BackEnd.rtMsrpMessage** __returnValue);
        }

        [uuid(BD3CC691-DAAF-35DD-9CDA-242B70BDF5DC)]
        [version(0x00000001)]
        interface rtIMsrpCallback : IInspectable
        {
            HRESULT OnEvent([in] doubango_rt.BackEnd.rtMsrpEvent* pEvent, [out] [retval] INT32* __returnValue);
        }

        [uuid(38A8B79D-5679-3AF4-BD1C-D27DE0494B1D)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMsrpCallback)]
        interface __IrtMsrpCallbackPublicNonVirtuals : IInspectable
        {
        }

        [uuid(944BB133-86E3-3FB3-BCF5-FD12B66E3BA6)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtDnsResult)]
        interface __IrtDnsResultPublicNonVirtuals : IInspectable
        {
            [propget] HRESULT Port([out] [retval] UINT16* __returnValue);
            [propget] HRESULT Address([out] [retval] HSTRING* __returnValue);
        }

        [uuid(31AC4C99-4FE9-3CCE-89B5-0C2750CCEEA7)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtSipStack)]
        interface __IrtSipStackPublicNonVirtuals : IInspectable
        {
            HRESULT start([out] [retval] boolean* __returnValue);
            HRESULT setDebugCallback([in] doubango_rt.BackEnd.rtIDDebugCallback* pCallback, [out] [retval] boolean* __returnValue);
            HRESULT setDisplayName([in] HSTRING display_name, [out] [retval] boolean* __returnValue);
            HRESULT setRealm([in] HSTRING realm_uri, [out] [retval] boolean* __returnValue);
            HRESULT setIMPI([in] HSTRING impi, [out] [retval] boolean* __returnValue);
            HRESULT setIMPU([in] HSTRING impu_uri, [out] [retval] boolean* __returnValue);
            HRESULT setPassword([in] HSTRING password, [out] [retval] boolean* __returnValue);
            HRESULT setAMF([in] HSTRING amf, [out] [retval] boolean* __returnValue);
            HRESULT setOperatorId([in] HSTRING opid, [out] [retval] boolean* __returnValue);
            HRESULT setProxyCSCF([in] HSTRING fqdn, [in] UINT16 port, [in] HSTRING transport, [in] HSTRING ipversion, [out] [retval] boolean* __returnValue);
            [overload("setLocalIP")] HRESULT setLocalIP2([in] HSTRING ip, [in] HSTRING transport, [out] [retval] boolean* __returnValue);
            [overload("setLocalIP")] HRESULT setLocalIP1([in] HSTRING ip, [out] [retval] boolean* __returnValue);
            [overload("setLocalPort")] HRESULT setLocalPort2([in] UINT16 port, [in] HSTRING transport, [out] [retval] boolean* __returnValue);
            [overload("setLocalPort")] HRESULT setLocalPort1([in] UINT16 port, [out] [retval] boolean* __returnValue);
            HRESULT setEarlyIMS([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT addHeader([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* __returnValue);
            HRESULT removeHeader([in] HSTRING name, [out] [retval] boolean* __returnValue);
            HRESULT addDnsServer([in] HSTRING ip, [out] [retval] boolean* __returnValue);
            HRESULT setDnsDiscovery([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT setAoR([in] HSTRING ip, [in] INT32 port, [out] [retval] boolean* __returnValue);
            HRESULT setSigCompParams([in] UINT32 dms, [in] UINT32 sms, [in] UINT32 cpb, [in] boolean enablePresDict, [out] [retval] boolean* __returnValue);
            HRESULT addSigCompCompartment([in] HSTRING compId, [out] [retval] boolean* __returnValue);
            HRESULT removeSigCompCompartment([in] HSTRING compId, [out] [retval] boolean* __returnValue);
            HRESULT setSTUNServer([in] HSTRING ip, [in] UINT16 port, [out] [retval] boolean* __returnValue);
            HRESULT setSTUNCred([in] HSTRING login, [in] HSTRING password, [out] [retval] boolean* __returnValue);
            HRESULT setTLSSecAgree([in] boolean enabled, [out] [retval] boolean* __returnValue);
            [overload("setSSLCertificates")] HRESULT setSSLCertificates2([in] HSTRING privKey, [in] HSTRING pubKey, [in] HSTRING caKey, [in] boolean verify, [out] [retval] boolean* __returnValue);
            [overload("setSSLCertificates")] HRESULT setSSLCertificates1([in] HSTRING privKey, [in] HSTRING pubKey, [in] HSTRING caKey, [out] [retval] boolean* __returnValue);
            HRESULT setIPSecSecAgree([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT setIPSecParameters([in] HSTRING algo, [in] HSTRING ealgo, [in] HSTRING mode, [in] HSTRING proto, [out] [retval] boolean* __returnValue);
            HRESULT dnsENUM([in] HSTRING service, [in] HSTRING e164num, [in] HSTRING domain, [out] [retval] HSTRING* __returnValue);
            HRESULT dnsNaptrSrv([in] HSTRING domain, [in] HSTRING service, [out] [retval] doubango_rt.BackEnd.rtDnsResult** __returnValue);
            HRESULT dnsSrv([in] HSTRING service, [out] [retval] doubango_rt.BackEnd.rtDnsResult** __returnValue);
            HRESULT getLocalIP([in] HSTRING protocol, [out] [retval] HSTRING* __returnValue);
            HRESULT getLocalPort([in] HSTRING protocol, [out] [retval] UINT16* __returnValue);
            HRESULT getPreferredIdentity([out] [retval] HSTRING* __returnValue);
            HRESULT isValid([out] [retval] boolean* __returnValue);
            HRESULT stop([out] [retval] boolean* __returnValue);
        }

        [uuid(102E8833-DCF3-3111-8252-66AE5C847073)]
        [exclusiveto(doubango_rt.BackEnd.rtSipStack)]
        [version(0x00000001)]
        interface __IrtSipStackStatics : IInspectable
        {
            HRESULT initialize([out] [retval] boolean* __returnValue);
            HRESULT deInitialize([out] [retval] boolean* __returnValue);
            HRESULT setCodecs([in] doubango_rt.BackEnd.rt_tdav_codec_id_t codecs);
            HRESULT setCodecPriority([in] doubango_rt.BackEnd.rt_tdav_codec_id_t codec_id, [in] INT32 priority, [out] [retval] boolean* __returnValue);
            HRESULT isCodecSupported([in] doubango_rt.BackEnd.rt_tdav_codec_id_t codec_id, [out] [retval] boolean* __returnValue);
        }

        [uuid(357645EC-98BF-3BAF-8B97-3338783397CB)]
        [exclusiveto(doubango_rt.BackEnd.rtSipUri)]
        [version(0x00000001)]
        interface __IrtSipUriPublicNonVirtuals : IInspectable
        {
            HRESULT isValid_([out] [retval] boolean* __returnValue);
            HRESULT getScheme([out] [retval] HSTRING* __returnValue);
            HRESULT getHost([out] [retval] HSTRING* __returnValue);
            HRESULT getPort([out] [retval] UINT16* __returnValue);
            HRESULT getUserName([out] [retval] HSTRING* __returnValue);
            HRESULT getPassword([out] [retval] HSTRING* __returnValue);
            HRESULT getDisplayName([out] [retval] HSTRING* __returnValue);
            HRESULT getParamValue([in] HSTRING name, [out] [retval] HSTRING* __returnValue);
            HRESULT setDisplayName([in] HSTRING displayName);
        }

        [uuid(44A6D232-AE6A-398C-AB6A-78D4EE5B8B5C)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtSipUri)]
        interface __IrtSipUriFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance2([in] HSTRING uriString, [in] HSTRING displayName, [out] [retval] doubango_rt.BackEnd.rtSipUri** __returnValue);
            [overload("CreateInstance")] HRESULT CreateInstance1([in] HSTRING uriString, [out] [retval] doubango_rt.BackEnd.rtSipUri** __returnValue);
        }

        [uuid(F04BF842-DE0A-31B9-B1CB-42CAD4040666)]
        [exclusiveto(doubango_rt.BackEnd.rtSipUri)]
        [version(0x00000001)]
        interface __IrtSipUriStatics : IInspectable
        {
            HRESULT isValid([in] HSTRING uri, [out] [retval] boolean* __returnValue);
        }

        [uuid(19F9A6F1-E76C-321C-BA0A-78DBA80EC230)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtT140CallbackData)]
        interface __IrtT140CallbackDataPublicNonVirtuals : IInspectable
        {
        }

        [uuid(FBC56EE2-7375-3F53-91D3-853079193184)]
        [version(0x00000001)]
        interface rtIT140Callback : IInspectable
        {
            HRESULT ondata([in] doubango_rt.BackEnd.rtT140CallbackData* pData, [out] [retval] INT32* __returnValue);
        }

        [uuid(540329E3-8DD6-391C-9EBD-4D738E1C04F0)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtT140Callback)]
        interface __IrtT140CallbackProtectedVirtuals : IInspectable
        {
            HRESULT ondata([in] doubango_rt.BackEnd.rtT140CallbackData* pData, [out] [retval] INT32* __returnValue);
        }

        [uuid(1275BFA1-5793-318F-97CD-D34CDF953775)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtT140Callback)]
        interface __IrtT140CallbackFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtIT140Callback* pI, [out] [retval] doubango_rt.BackEnd.rtT140Callback** __returnValue);
        }

        [uuid(9BFB53AD-BFC4-3784-9E6D-6839B5E87320)]
        [version(0x00000001)]
        interface rtISipSession : IInspectable
        {
            HRESULT getId([out] [retval] UINT32* __returnValue);
            HRESULT haveOwnership([out] [retval] boolean* __returnValue);
            HRESULT addHeader([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* __returnValue);
            HRESULT removeHeader([in] HSTRING name, [out] [retval] boolean* __returnValue);
            [default_overload] HRESULT addCaps([in] HSTRING name, [in] HSTRING value, [out] [retval] boolean* __returnValue);
            HRESULT removeCaps([in] HSTRING name, [out] [retval] boolean* __returnValue);
            HRESULT setExpires([in] UINT32 expires, [out] [retval] boolean* __returnValue);
            [default_overload] HRESULT setFromUri([in] doubango_rt.BackEnd.rtSipUri* fromUri, [out] [retval] boolean* __returnValue);
            [default_overload] HRESULT setToUri([in] doubango_rt.BackEnd.rtSipUri* toUri, [out] [retval] boolean* __returnValue);
            HRESULT setSilentHangup([in] boolean silent, [out] [retval] boolean* __returnValue);
            HRESULT addSigCompCompartment([in] HSTRING compId, [out] [retval] boolean* __returnValue);
            HRESULT removeSigCompCompartment([out] [retval] boolean* __returnValue);
        }

        [uuid(A93DFA4F-7D83-32D0-B866-CC9FC57D7225)]
        [version(0x00000001)]
        interface rtIInviteSession : IInspectable
            requires
                doubango_rt.BackEnd.rtISipSession
        {
            [default_overload] HRESULT accept([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [default_overload] HRESULT hangup([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [default_overload] HRESULT reject([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [default_overload] HRESULT sendInfo([in] HSTRING payload, [in] UINT32 len, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            HRESULT getMediaMgr([out] [retval] doubango_rt.BackEnd.rtMediaSessionMgr** __returnValue);
        }

        [uuid(6ACF024C-5FA2-3607-92B2-677405C75519)]
        [exclusiveto(doubango_rt.BackEnd.rtSipSession)]
        [version(0x00000001)]
        interface __IrtSipSessionPublicNonVirtuals : IInspectable
        {
        }

        [uuid(6EEC00B8-8AFD-3C0D-9EE6-BB0BD3FE761A)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtSipSession)]
        interface __IrtSipSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtSipSession** __returnValue);
        }

        [uuid(266A5021-F4D7-3457-8C28-00C7A386ABDE)]
        [exclusiveto(doubango_rt.BackEnd.rtInviteSession)]
        [version(0x00000001)]
        interface __IrtInviteSessionPublicNonVirtuals : IInspectable
        {
        }

        [uuid(8102D159-281E-397D-B6DD-AB94059820A7)]
        [exclusiveto(doubango_rt.BackEnd.rtInviteSession)]
        [version(0x00000001)]
        interface __IrtInviteSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtInviteSession** __returnValue);
        }

        [uuid(7D605CC9-6FF4-3D58-9976-F23C30D4AED5)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtCallSession)]
        interface __IrtCallSessionPublicNonVirtuals : IInspectable
        {
            [default_overload] [overload("call")] HRESULT call4([in] HSTRING remoteUriString, [in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("call")] [default_overload] HRESULT call3([in] HSTRING remoteUriString, [in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [out] [retval] boolean* __returnValue);
            [overload("call")] HRESULT call2([in] doubango_rt.BackEnd.rtSipUri* remoteUri, [in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("call")] HRESULT call1([in] doubango_rt.BackEnd.rtSipUri* remoteUri, [in] doubango_rt.BackEnd.rt_twrap_media_type_t media, [out] [retval] boolean* __returnValue);
            HRESULT setSessionTimer([in] UINT32 timeout, [in] HSTRING refresher, [out] [retval] boolean* __returnValue);
            HRESULT set100rel([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT setRtcp([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT setRtcpMux([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT setICE([in] boolean enabled, [out] [retval] boolean* __returnValue);
            HRESULT setQoS([in] doubango_rt.BackEnd.rt_tmedia_qos_stype_t type, [in] doubango_rt.BackEnd.rt_tmedia_qos_strength_t strength, [out] [retval] boolean* __returnValue);
            [overload("hold")] HRESULT hold2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("hold")] HRESULT hold1([out] [retval] boolean* __returnValue);
            [overload("resume")] HRESULT resume2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("resume")] HRESULT resume1([out] [retval] boolean* __returnValue);
            [overload("transfer")] HRESULT transfer2([in] HSTRING referToUriString, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("transfer")] HRESULT transfer1([in] HSTRING referToUriString, [out] [retval] boolean* __returnValue);
            [overload("acceptTransfer")] HRESULT acceptTransfer2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("acceptTransfer")] HRESULT acceptTransfer1([out] [retval] boolean* __returnValue);
            [overload("rejectTransfer")] HRESULT rejectTransfer2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("rejectTransfer")] HRESULT rejectTransfer1([out] [retval] boolean* __returnValue);
            HRESULT sendDTMF([in] INT32 number, [out] [retval] boolean* __returnValue);
            HRESULT getSessionTransferId([out] [retval] UINT32* __returnValue);
            [overload("sendT140Data")] HRESULT sendT140Data2([in] doubango_rt.BackEnd.rt_tmedia_t140_data_type_t data_type, [in] HSTRING data, [out] [retval] boolean* __returnValue);
            [overload("sendT140Data")] HRESULT sendT140Data1([in] doubango_rt.BackEnd.rt_tmedia_t140_data_type_t data_type, [out] [retval] boolean* __returnValue);
            HRESULT setT140Callback([in] doubango_rt.BackEnd.rtT140Callback* pT140Callback, [out] [retval] boolean* __returnValue);
        }

        [uuid(9B651B7D-7BFE-3918-BDFE-52B72F9B0F30)]
        [exclusiveto(doubango_rt.BackEnd.rtCallSession)]
        [version(0x00000001)]
        interface __IrtCallSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtCallSession** __returnValue);
        }

        [uuid(746AFEAB-0072-38FE-B1A7-21770BE64A4A)]
        [exclusiveto(doubango_rt.BackEnd.rtMsrpSession)]
        [version(0x00000001)]
        interface __IrtMsrpSessionPublicNonVirtuals : IInspectable
        {
            HRESULT setCallback([in] doubango_rt.BackEnd.rtIMsrpCallback* pCallback, [out] [retval] boolean* __returnValue);
            [overload("callMsrp")] [default_overload] HRESULT callMsrp4([in] HSTRING remoteUriString, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("callMsrp")] [default_overload] HRESULT callMsrp3([in] HSTRING remoteUriString, [out] [retval] boolean* __returnValue);
            [overload("callMsrp")] HRESULT callMsrp2([in] doubango_rt.BackEnd.rtSipUri* remoteUri, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("callMsrp")] HRESULT callMsrp1([in] doubango_rt.BackEnd.rtSipUri* remoteUri, [out] [retval] boolean* __returnValue);
            [overload("sendMessage")] HRESULT sendMessage2([in] HSTRING payload, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("sendMessage")] HRESULT sendMessage1([in] HSTRING payload, [out] [retval] boolean* __returnValue);
        }

        [uuid(840E557A-A75D-35A5-9E1E-9AFE1FA80A9D)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMsrpSession)]
        interface __IrtMsrpSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [in] doubango_rt.BackEnd.rtIMsrpCallback* pCallback, [out] [retval] doubango_rt.BackEnd.rtMsrpSession** __returnValue);
        }

        [uuid(AACA3593-CEFB-373E-A229-853C78AD5921)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMessagingSession)]
        interface __IrtMessagingSessionPublicNonVirtuals : IInspectable
        {
            [overload("send")] HRESULT send2([in] HSTRING payload, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("send")] HRESULT send1([in] HSTRING payload, [out] [retval] boolean* __returnValue);
            [overload("accept")] [default_overload] HRESULT accept2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("accept")] HRESULT accept1([out] [retval] boolean* __returnValue);
            [default_overload] [overload("reject")] HRESULT reject2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("reject")] HRESULT reject1([out] [retval] boolean* __returnValue);
        }

        [uuid(489F9906-CC60-3868-A55A-E93A7455B514)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMessagingSession)]
        interface __IrtMessagingSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtMessagingSession** __returnValue);
        }

        [uuid(6A30534C-9226-3450-861F-8D92E241D611)]
        [exclusiveto(doubango_rt.BackEnd.rtInfoSession)]
        [version(0x00000001)]
        interface __IrtInfoSessionPublicNonVirtuals : IInspectable
        {
            [overload("send")] HRESULT send2([in] HSTRING payload, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("send")] HRESULT send1([in] HSTRING payload, [out] [retval] boolean* __returnValue);
            [default_overload] [overload("accept")] HRESULT accept2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("accept")] HRESULT accept1([out] [retval] boolean* __returnValue);
            [overload("reject")] [default_overload] HRESULT reject2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("reject")] HRESULT reject1([out] [retval] boolean* __returnValue);
        }

        [uuid(548CF937-8336-3950-AA5C-F8CA1D9B4A67)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtInfoSession)]
        interface __IrtInfoSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtInfoSession** __returnValue);
        }

        [uuid(7AA94F17-FBEB-3FAC-92ED-898FB9F4EDC7)]
        [exclusiveto(doubango_rt.BackEnd.rtOptionsSession)]
        [version(0x00000001)]
        interface __IrtOptionsSessionPublicNonVirtuals : IInspectable
        {
            [overload("send")] [default_overload] HRESULT send2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("send")] HRESULT send1([out] [retval] boolean* __returnValue);
            [overload("accept")] [default_overload] HRESULT accept2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("accept")] HRESULT accept1([out] [retval] boolean* __returnValue);
            [default_overload] [overload("reject")] HRESULT reject2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("reject")] HRESULT reject1([out] [retval] boolean* __returnValue);
        }

        [uuid(1FB0FA30-B04C-3AFC-87EF-B3264AE0B43C)]
        [exclusiveto(doubango_rt.BackEnd.rtOptionsSession)]
        [version(0x00000001)]
        interface __IrtOptionsSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtOptionsSession** __returnValue);
        }

        [uuid(8D8BFB47-BE91-3E55-AD42-51A6F8E0190A)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtPublicationSession)]
        interface __IrtPublicationSessionPublicNonVirtuals : IInspectable
        {
            [overload("publish")] HRESULT publish2([in] HSTRING payload, [in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("publish")] HRESULT publish1([in] HSTRING payload, [out] [retval] boolean* __returnValue);
            [default_overload] [overload("unPublish")] HRESULT unPublish2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("unPublish")] HRESULT unPublish1([out] [retval] boolean* __returnValue);
        }

        [uuid(DE777EC1-607A-3E44-910E-932793DF128E)]
        [exclusiveto(doubango_rt.BackEnd.rtPublicationSession)]
        [version(0x00000001)]
        interface __IrtPublicationSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtPublicationSession** __returnValue);
        }

        [uuid(D34B80F8-410C-3A42-AA06-296EB6A8E2B1)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtRegistrationSession)]
        interface __IrtRegistrationSessionPublicNonVirtuals : IInspectable
        {
            [overload("register_")] HRESULT register_2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("register_")] HRESULT register_1([out] [retval] boolean* __returnValue);
            [overload("unRegister")] HRESULT unRegister2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("unRegister")] HRESULT unRegister1([out] [retval] boolean* __returnValue);
            [overload("accept")] HRESULT accept2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("accept")] HRESULT accept1([out] [retval] boolean* __returnValue);
            [overload("reject")] HRESULT reject2([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            [overload("reject")] HRESULT reject1([out] [retval] boolean* __returnValue);
        }

        [uuid(AC3D979B-2D68-3AD7-8D53-7C1D7444F7BC)]
        [exclusiveto(doubango_rt.BackEnd.rtRegistrationSession)]
        [version(0x00000001)]
        interface __IrtRegistrationSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtRegistrationSession** __returnValue);
        }

        [uuid(E3F89F64-B94A-368B-9082-93AF84F8BB1F)]
        [exclusiveto(doubango_rt.BackEnd.rtSubscriptionSession)]
        [version(0x00000001)]
        interface __IrtSubscriptionSessionPublicNonVirtuals : IInspectable
        {
            HRESULT subscribe([out] [retval] boolean* __returnValue);
            HRESULT unSubscribe([out] [retval] boolean* __returnValue);
        }

        [uuid(71094813-DA89-30CF-BD63-A70FDF4A85FA)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtSubscriptionSession)]
        interface __IrtSubscriptionSessionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateInstance1([in] doubango_rt.BackEnd.rtSipStack* pStack, [out] [retval] doubango_rt.BackEnd.rtSubscriptionSession** __returnValue);
        }

        [uuid(B210DD33-A6A6-34A8-A96A-EFAC9D0B8DBA)]
        [version(0x00000001)]
        interface rtISipCallback : IInspectable
        {
            HRESULT OnDialogEvent([in] doubango_rt.BackEnd.rtDialogEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnStackEvent([in] doubango_rt.BackEnd.rtStackEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnInviteEvent([in] doubango_rt.BackEnd.rtInviteEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnMessagingEvent([in] doubango_rt.BackEnd.rtMessagingEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnInfoEvent([in] doubango_rt.BackEnd.rtInfoEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnOptionsEvent([in] doubango_rt.BackEnd.rtOptionsEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnPublicationEvent([in] doubango_rt.BackEnd.rtPublicationEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnRegistrationEvent([in] doubango_rt.BackEnd.rtRegistrationEvent* e, [out] [retval] INT32* __returnValue);
            HRESULT OnSubscriptionEvent([in] doubango_rt.BackEnd.rtSubscriptionEvent* e, [out] [retval] INT32* __returnValue);
        }

        [uuid(F6F4FF9E-06BC-3929-BAEA-6F7FA44013FE)]
        [exclusiveto(doubango_rt.BackEnd.rtSipCallback)]
        [version(0x00000001)]
        interface __IrtSipCallbackPublicNonVirtuals : IInspectable
        {
        }

        [uuid(6FDB3F81-9CB1-34F1-9AD6-78780BC58E43)]
        [version(0x00000001)]
        interface rtISipEvent : IInspectable
        {
            HRESULT getCode([out] [retval] INT16* __returnValue);
            HRESULT getPhrase([out] [retval] HSTRING* __returnValue);
            HRESULT getBaseSession([out] [retval] doubango_rt.BackEnd.rtISipSession** __returnValue);
            HRESULT getSipMessage([out] [retval] doubango_rt.BackEnd.rtSipMessage** __returnValue);
        }

        [uuid(65780FAA-8EBB-375D-B04C-47555D0F2845)]
        [exclusiveto(doubango_rt.BackEnd.rtDialogEvent)]
        [version(0x00000001)]
        interface __IrtDialogEventPublicNonVirtuals : IInspectable
        {
        }

        [uuid(5FB380DD-095D-32D4-ACE4-7991516FD8EA)]
        [exclusiveto(doubango_rt.BackEnd.rtStackEvent)]
        [version(0x00000001)]
        interface __IrtStackEventPublicNonVirtuals : IInspectable
        {
        }

        [uuid(731A866B-4B61-3A41-9F4B-0DA7322F1AA7)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtInviteEvent)]
        interface __IrtInviteEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_invite_event_type_t* __returnValue);
            HRESULT getMediaType([out] [retval] doubango_rt.BackEnd.rt_twrap_media_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtInviteSession** __returnValue);
            HRESULT takeCallSessionOwnership([out] [retval] doubango_rt.BackEnd.rtCallSession** __returnValue);
            HRESULT takeMsrpSessionOwnership([out] [retval] doubango_rt.BackEnd.rtMsrpSession** __returnValue);
        }

        [uuid(D6D6ADFB-954A-36F7-B36B-51FD4091FEDA)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtMessagingEvent)]
        interface __IrtMessagingEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_message_event_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtMessagingSession** __returnValue);
            HRESULT takeSessionOwnership([out] [retval] doubango_rt.BackEnd.rtMessagingSession** __returnValue);
        }

        [uuid(3E3607D8-9CA6-3CD2-9C82-4478580C86D1)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtInfoEvent)]
        interface __IrtInfoEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_info_event_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtInfoSession** __returnValue);
            HRESULT takeSessionOwnership([out] [retval] doubango_rt.BackEnd.rtInfoSession** __returnValue);
        }

        [uuid(01126DE2-DB09-3456-93C8-0517C3F963D5)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtOptionsEvent)]
        interface __IrtOptionsEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_options_event_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtOptionsSession** __returnValue);
            HRESULT takeSessionOwnership([out] [retval] doubango_rt.BackEnd.rtOptionsSession** __returnValue);
        }

        [uuid(EC75DE12-C356-33FD-B8AF-AE4AB05414A5)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.rtPublicationEvent)]
        interface __IrtPublicationEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_publish_event_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtPublicationSession** __returnValue);
            HRESULT takeSessionOwnership([out] [retval] doubango_rt.BackEnd.rtPublicationSession** __returnValue);
        }

        [uuid(599EE12A-5485-3D18-9ACE-F0885D29455E)]
        [exclusiveto(doubango_rt.BackEnd.rtRegistrationEvent)]
        [version(0x00000001)]
        interface __IrtRegistrationEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_register_event_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtRegistrationSession** __returnValue);
            HRESULT takeSessionOwnership([out] [retval] doubango_rt.BackEnd.rtRegistrationSession** __returnValue);
        }

        [uuid(9F4A8862-8482-3083-B24C-796737FDF42B)]
        [exclusiveto(doubango_rt.BackEnd.rtSubscriptionEvent)]
        [version(0x00000001)]
        interface __IrtSubscriptionEventPublicNonVirtuals : IInspectable
        {
            HRESULT getType([out] [retval] doubango_rt.BackEnd.rt_tsip_subscribe_event_type_t* __returnValue);
            HRESULT getSession([out] [retval] doubango_rt.BackEnd.rtSubscriptionSession** __returnValue);
            HRESULT takeSessionOwnership([out] [retval] doubango_rt.BackEnd.rtSubscriptionSession** __returnValue);
        }

        [uuid(6D43145F-FC50-3FD7-9D1F-BC4789AA9CED)]
        [exclusiveto(doubango_rt.BackEnd.rtSdpMessage)]
        [version(0x00000001)]
        interface __IrtSdpMessagePublicNonVirtuals : IInspectable
        {
            [overload("getSdpHeaderValue")] HRESULT getSdpHeaderValue2([in] HSTRING media, [in] HSTRING name, [in] UINT32 index, [out] [retval] HSTRING* __returnValue);
            [overload("getSdpHeaderValue")] HRESULT getSdpHeaderValue1([in] HSTRING media, [in] HSTRING name, [out] [retval] HSTRING* __returnValue);
            HRESULT getSdpHeaderAValue([in] HSTRING media, [in] HSTRING attributeName, [out] [retval] HSTRING* __returnValue);
        }

        [uuid(F68542F0-F6C6-3DE5-86FE-31E2ADD4E41E)]
        [exclusiveto(doubango_rt.BackEnd.rtSipMessage)]
        [version(0x00000001)]
        interface __IrtSipMessagePublicNonVirtuals : IInspectable
        {
            HRESULT isResponse([out] [retval] boolean* __returnValue);
            HRESULT getRequestType([out] [retval] doubango_rt.BackEnd.rt_tsip_request_type_t* __returnValue);
            HRESULT getResponseCode([out] [retval] INT16* __returnValue);
            HRESULT getResponsePhrase([out] [retval] HSTRING* __returnValue);
            [overload("getSipHeaderValue")] HRESULT getSipHeaderValue2([in] HSTRING name, [in] UINT32 index, [out] [retval] HSTRING* __returnValue);
            [overload("getSipHeaderValue")] HRESULT getSipHeaderValue1([in] HSTRING name, [out] [retval] HSTRING* __returnValue);
            [overload("getSipHeaderParamValue")] HRESULT getSipHeaderParamValue2([in] HSTRING name, [in] HSTRING param, [in] UINT32 index, [out] [retval] HSTRING* __returnValue);
            [overload("getSipHeaderParamValue")] HRESULT getSipHeaderParamValue1([in] HSTRING name, [in] HSTRING param, [out] [retval] HSTRING* __returnValue);
            HRESULT getSipContentLength([out] [retval] UINT32* __returnValue);
            HRESULT getSipContent([out] [retval] HSTRING* __returnValue);
            HRESULT getSdpMessage([out] [retval] doubango_rt.BackEnd.rtSdpMessage** __returnValue);
        }

        [uuid(F8F3EBEE-094D-38D5-840A-254710AE9091)]
        [version(0x00000001)]
        interface IVideoRenderer : IInspectable
        {
            HRESULT Start();
            HRESULT Stop();
        }

        [uuid(3F230803-D28D-3153-A07C-7F9FD9C91E43)]
        [version(0x00000001)]
        interface IDebugMessageListener : IInspectable
        {
            HRESULT OnDebugMessage([in] doubango_rt.BackEnd.DebugLevel level, [in] HSTRING message);
        }

        [uuid(19BAB5B7-A2FC-3714-9A50-913351616BAA)]
        [version(0x00000001)]
        interface IAudioStateChangedListener : IInspectable
        {
            HRESULT OnAudioRoutingChanged([in] doubango_rt.BackEnd.AudioRoute newRoute);
        }

        [uuid(BEEF9A82-3E32-3ADB-A750-09C020B25194)]
        [version(0x00000001)]
        interface ISipRegistrationStateChangedListener : IInspectable
        {
            HRESULT OnRegistrationStateChanged([in] doubango_rt.BackEnd.SipSessionState newState, [in] UINT16 sipCode, [in] HSTRING description);
        }

        [uuid(79981920-108E-3EFF-BFFB-1435777B55A0)]
        [version(0x00000001)]
        interface ISipAVCallStateChangedListener : IInspectable
        {
            HRESULT OnAVCallStateChanged([in] doubango_rt.BackEnd.SipAVCallState newState, [in] UINT16 sipCode, [in] HSTRING description);
            HRESULT OnHoldStateChanged([in] doubango_rt.BackEnd.SipHoldStateState newState);
        }

        [uuid(EB16F8EC-3180-35C4-A4D8-A9D73427E4FA)]
        [version(0x00000001)]
        interface ISipStackStateChangedListener : IInspectable
        {
            HRESULT OnStackStateChanged([in] doubango_rt.BackEnd.SipStackState newState, [in] HSTRING description);
        }

        [uuid(4868DDC4-3353-3344-842D-EB96AC8371B9)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.SipConfig)]
        interface __ISipConfigPublicNonVirtuals : IInspectable
        {
            [propget] HRESULT DisplayName([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT DisplayName([in] HSTRING value);
            [propget] HRESULT RealmUri([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT RealmUri([in] HSTRING value);
            [propget] HRESULT ImpiString([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT ImpiString([in] HSTRING value);
            [propget] HRESULT ImpuUri([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT ImpuUri([in] HSTRING value);
            [propget] HRESULT Password([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT Password([in] HSTRING value);
            [propget] HRESULT ProxyHost([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT ProxyHost([in] HSTRING value);
            [propget] HRESULT ProxyPort([out] [retval] UINT16* __returnValue);
            [propput] HRESULT ProxyPort([in] UINT16 value);
            [propget] HRESULT EarlyIMS([out] [retval] boolean* __returnValue);
            [propput] HRESULT EarlyIMS([in] boolean value);
            [propget] HRESULT Transport([out] [retval] doubango_rt.BackEnd.SipNetworkTransport* __returnValue);
            [propput] HRESULT Transport([in] doubango_rt.BackEnd.SipNetworkTransport value);
            [propget] HRESULT IPVersion([out] [retval] doubango_rt.BackEnd.IPVersion* __returnValue);
            [propput] HRESULT IPVersion([in] doubango_rt.BackEnd.IPVersion value);
            [propget] HRESULT PushNotificationUri([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT PushNotificationUri([in] HSTRING value);
            [propget] HRESULT UserAgent([out] [retval] HSTRING* __returnValue);
            [propput] HRESULT UserAgent([in] HSTRING value);
        }

        [uuid(05FC37D6-FF7F-3D9F-A6FD-775DD14372AD)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.SipAVCall)]
        interface __ISipAVCallPublicNonVirtuals : IInspectable
        {
            [propget] HRESULT WithVideo([out] [retval] boolean* __returnValue);
            [propget] HRESULT State([out] [retval] doubango_rt.BackEnd.SipAVCallState* __returnValue);
            [propget] HRESULT HoldState([out] [retval] doubango_rt.BackEnd.SipHoldStateState* __returnValue);
            [propget] HRESULT UriRemote([out] [retval] doubango_rt.BackEnd.rtSipUri** __returnValue);
            HRESULT Accept([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            HRESULT HangUp([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            HRESULT Hold([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            HRESULT Resume([in] doubango_rt.BackEnd.rtActionConfig* config, [out] [retval] boolean* __returnValue);
            HRESULT SendDTMF([in] INT32 dtmfCode, [out] [retval] boolean* __returnValue);
        }

        [uuid(CC5B3C10-588D-37C4-818A-97DDA8C1D5DC)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.SipService)]
        interface __ISipServicePublicNonVirtuals : IInspectable
        {
            [propget] HRESULT SipConfig([out] [retval] doubango_rt.BackEnd.SipConfig** __returnValue);
            [propget] HRESULT RegistrationState([out] [retval] doubango_rt.BackEnd.SipSessionState* __returnValue);
            [propget] HRESULT SipActiveAVCall([out] [retval] doubango_rt.BackEnd.SipAVCall** __returnValue);
            [propget] HRESULT AvailableAudioRoutes([out] [retval] doubango_rt.BackEnd.AudioRoute* __returnValue);
            [propget] HRESULT AudioRoute([out] [retval] doubango_rt.BackEnd.AudioRoute* __returnValue);
            [propput] HRESULT AudioRoute([in] doubango_rt.BackEnd.AudioRoute newRoute);
            [propget] HRESULT CameraLocation([out] [retval] doubango_rt.BackEnd.CameraSensorLocation* __returnValue);
            [propput] HRESULT CameraLocation([in] doubango_rt.BackEnd.CameraSensorLocation newLocation);
            HRESULT SetDebugMessageListener([in] doubango_rt.BackEnd.IDebugMessageListener* pListener);
            HRESULT SetAudioStateChangedListener([in] doubango_rt.BackEnd.IAudioStateChangedListener* pListener);
            HRESULT SetSipRegistrationStateChangedListener([in] doubango_rt.BackEnd.ISipRegistrationStateChangedListener* pListener);
            HRESULT SetSipStackStateChangedListener([in] doubango_rt.BackEnd.ISipStackStateChangedListener* pListener);
            HRESULT SetSipAVCallStateChangedListener([in] doubango_rt.BackEnd.ISipAVCallStateChangedListener* pListener);
            HRESULT Start([out] [retval] boolean* __returnValue);
            HRESULT Stop([in] boolean bEnteringBackground, [out] [retval] boolean* __returnValue);
            HRESULT Register([out] [retval] boolean* __returnValue);
            HRESULT UnRegister([out] [retval] boolean* __returnValue);
            HRESULT MakeCallAudio([in] doubango_rt.BackEnd.rtSipUri* pTo, [in] doubango_rt.BackEnd.rtActionConfig* pConfig, [out] [retval] doubango_rt.BackEnd.SipAVCall** __returnValue);
            HRESULT MakeCallAudioVideo([in] doubango_rt.BackEnd.rtSipUri* pTo, [in] doubango_rt.BackEnd.rtActionConfig* pConfig, [out] [retval] doubango_rt.BackEnd.SipAVCall** __returnValue);
        }

        [uuid(228FB9E6-ED53-3289-ACE3-995F36F172B2)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.SipService)]
        interface __ISipServiceStatics : IInspectable
        {
            HRESULT SetCodecs([in] doubango_rt.BackEnd.rt_tdav_codec_id_t codecs, [out] [retval] boolean* __returnValue);
        }

        [uuid(2F22CC8A-1FA9-3EF8-BD69-A1B61A696F3C)]
        [exclusiveto(doubango_rt.BackEnd.Globals)]
        [version(0x00000001)]
        interface __IGlobalsPublicNonVirtuals : IInspectable
        {
            HRESULT StartServer([in] UINT32 __outOfProcServerClassNamesSize, [in] [size_is(__outOfProcServerClassNamesSize)] HSTRING* outOfProcServerClassNames);
            HRESULT DoPeriodicKeepAlive();
            [propget] HRESULT VideoRenderer([out] [retval] doubango_rt.BackEnd.IVideoRenderer** __returnValue);
            [propput] HRESULT VideoRenderer([in] doubango_rt.BackEnd.IVideoRenderer* value);
            [propget] HRESULT SipService([out] [retval] doubango_rt.BackEnd.SipService** __returnValue);
            [eventadd] HRESULT VideoFrameReceived([in] doubango_rt.BackEnd.VideoFrameReceivedEventHandler* __param0, [out] [retval] EventRegistrationToken* __returnValue);
            [eventremove] HRESULT VideoFrameReceived([in] EventRegistrationToken __param0);
        }

        [uuid(FD21E8E5-0146-348B-979D-9237197A9A9B)]
        [exclusiveto(doubango_rt.BackEnd.Globals)]
        [version(0x00000001)]
        interface __IGlobalsProtectedNonVirtuals : IInspectable
        {
        }

        [uuid(D397D79C-41C8-3E86-B794-A20EA8D545F5)]
        [version(0x00000001)]
        [exclusiveto(doubango_rt.BackEnd.Globals)]
        interface __IGlobalsStatics : IInspectable
        {
            HRESULT GetCurrentProcessId([out] [retval] UINT32* __returnValue);
            HRESULT GetUiDisconnectedEventName([in] UINT32 backgroundProcessId, [out] [retval] HSTRING* __returnValue);
            HRESULT GetBackgroundProcessReadyEventName([in] UINT32 backgroundProcessId, [out] [retval] HSTRING* __returnValue);
            [propget] HRESULT Instance([out] [retval] doubango_rt.BackEnd.Globals** __returnValue);
        }

        [activatable(0x00000001)]
        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass rtActionConfig
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtActionConfigPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass rtDDebugCallback
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtDDebugCallbackPublicNonVirtuals;
        }

        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass rtCodec
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtCodecPublicNonVirtuals;
        }

        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        [static(doubango_rt.BackEnd.__IrtMediaSessionMgrStatics, 0x00000001)]
        runtimeclass rtMediaSessionMgr
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtMediaSessionMgrPublicNonVirtuals;
        }

        [version(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass rtMsrpByteRange
        {
            [default] interface doubango_rt.BackEnd.__IrtMsrpByteRangePublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        runtimeclass rtMsrpMessage
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtMsrpMessagePublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        runtimeclass rtMsrpEvent
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtMsrpEventPublicNonVirtuals;
        }

        [threading(both)]
        [marshaling_behavior(agile)]
        [version(0x00000001)]
        runtimeclass rtMsrpCallback
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtMsrpCallbackPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass rtDnsResult
        {
            [default] interface doubango_rt.BackEnd.__IrtDnsResultPublicNonVirtuals;
        }

        [threading(both)]
        [static(doubango_rt.BackEnd.__IrtSipStackStatics, 0x00000001)]
        [marshaling_behavior(agile)]
        [version(0x00000001)]
        runtimeclass rtSipStack
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtSipStackPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        [static(doubango_rt.BackEnd.__IrtSipUriStatics, 0x00000001)]
        [activatable(doubango_rt.BackEnd.__IrtSipUriFactory, 0x00000001)]
        runtimeclass rtSipUri
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtSipUriPublicNonVirtuals;
        }

        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass rtT140CallbackData
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtT140CallbackDataPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [version(0x00000001)]
        [activatable(doubango_rt.BackEnd.__IrtT140CallbackFactory, 0x00000001)]
        [threading(both)]
        runtimeclass rtT140Callback
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtT140CallbackProtectedVirtuals;
        }

        [marshaling_behavior(agile)]
        [activatable(doubango_rt.BackEnd.__IrtSipSessionFactory, 0x00000001)]
        [version(0x00000001)]
        [threading(both)]
        runtimeclass rtSipSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtSipSessionPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        [activatable(doubango_rt.BackEnd.__IrtInviteSessionFactory, 0x00000001)]
        runtimeclass rtInviteSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            interface doubango_rt.BackEnd.rtIInviteSession;
            [default] interface doubango_rt.BackEnd.__IrtInviteSessionPublicNonVirtuals;
        }

        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        [activatable(doubango_rt.BackEnd.__IrtCallSessionFactory, 0x00000001)]
        runtimeclass rtCallSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            interface doubango_rt.BackEnd.rtIInviteSession;
            [default] interface doubango_rt.BackEnd.__IrtCallSessionPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        [activatable(doubango_rt.BackEnd.__IrtMsrpSessionFactory, 0x00000001)]
        runtimeclass rtMsrpSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            interface doubango_rt.BackEnd.rtIInviteSession;
            [default] interface doubango_rt.BackEnd.__IrtMsrpSessionPublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        [activatable(doubango_rt.BackEnd.__IrtMessagingSessionFactory, 0x00000001)]
        runtimeclass rtMessagingSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtMessagingSessionPublicNonVirtuals;
        }

        [activatable(doubango_rt.BackEnd.__IrtInfoSessionFactory, 0x00000001)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass rtInfoSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtInfoSessionPublicNonVirtuals;
        }

        [activatable(doubango_rt.BackEnd.__IrtOptionsSessionFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass rtOptionsSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtOptionsSessionPublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [activatable(doubango_rt.BackEnd.__IrtPublicationSessionFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass rtPublicationSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtPublicationSessionPublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        [activatable(doubango_rt.BackEnd.__IrtRegistrationSessionFactory, 0x00000001)]
        runtimeclass rtRegistrationSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtRegistrationSessionPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [activatable(doubango_rt.BackEnd.__IrtSubscriptionSessionFactory, 0x00000001)]
        [version(0x00000001)]
        runtimeclass rtSubscriptionSession
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipSession;
            [default] interface doubango_rt.BackEnd.__IrtSubscriptionSessionPublicNonVirtuals;
        }

        [threading(both)]
        [marshaling_behavior(agile)]
        [version(0x00000001)]
        runtimeclass rtSipCallback
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtSipCallbackPublicNonVirtuals;
        }

        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass rtDialogEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtDialogEventPublicNonVirtuals;
        }

        [threading(both)]
        [version(0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass rtStackEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtStackEventPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [version(0x00000001)]
        [threading(both)]
        runtimeclass rtInviteEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtInviteEventPublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        runtimeclass rtMessagingEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtMessagingEventPublicNonVirtuals;
        }

        [version(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass rtInfoEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtInfoEventPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass rtOptionsEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtOptionsEventPublicNonVirtuals;
        }

        [threading(both)]
        [marshaling_behavior(agile)]
        [version(0x00000001)]
        runtimeclass rtPublicationEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtPublicationEventPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass rtRegistrationEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtRegistrationEventPublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        runtimeclass rtSubscriptionEvent
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipEvent;
            [default] interface doubango_rt.BackEnd.__IrtSubscriptionEventPublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        runtimeclass rtSdpMessage
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtSdpMessagePublicNonVirtuals;
        }

        [version(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        runtimeclass rtSipMessage
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__IrtSipMessagePublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [marshaling_behavior(agile)]
        runtimeclass SipConfig
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__ISipConfigPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass SipAVCall
        {
            interface Windows.Foundation.IClosable;
            [default] interface doubango_rt.BackEnd.__ISipAVCallPublicNonVirtuals;
        }

        [marshaling_behavior(agile)]
        [version(0x00000001)]
        [static(doubango_rt.BackEnd.__ISipServiceStatics, 0x00000001)]
        [threading(both)]
        runtimeclass SipService
        {
            interface Windows.Foundation.IClosable;
            interface doubango_rt.BackEnd.rtISipCallback;
            interface doubango_rt.BackEnd.rtIDDebugCallback;
            [default] interface doubango_rt.BackEnd.__ISipServicePublicNonVirtuals;
        }

        [version(0x00000001)]
        [threading(both)]
        [static(doubango_rt.BackEnd.__IGlobalsStatics, 0x00000001)]
        [marshaling_behavior(agile)]
        runtimeclass Globals
        {
            [default] interface doubango_rt.BackEnd.__IGlobalsPublicNonVirtuals;
            interface doubango_rt.BackEnd.__IGlobalsProtectedNonVirtuals;
        }
    }
}
